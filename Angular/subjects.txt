Subjects 
- A Subject is a special type of Observable which shares a single execution path among observers.

There are 4 variants of subjects:

1. Subject - No initial value or replay behavior.
2. AsyncSubject - Emits latest value to observers upon completion.
3. BehaviorSubject - Requires an initial value and emits its current value (last emitted item) to new subscribers.
4. ReplaySubject - Emits specified number of last emitted values (a replay) to new subscribers.
 
Subject: 
- Listen to all value changes of subject done only after subscription.
- Basic type of multicasting
    Ex: const subject = new Subject();
        subject.next('1');
        subject.subscribe((val) => {		  console.log('sub 1:', val);		});
        subject.next('2');
        subject.subscribe((val) => {		  console.log('sub 2:', val);		});
        subject.next('3');
    Output: sub 1: 2
            sub 1: 3
            sub 2: 3

BehaviorSubject:
- A type of subject that requires an initial value and emits its current value to new subscribers.
- Will emit only latest value.
    Ex: const behaviourSubject = new BehaviorSubject(0);
        behaviourSubject.subscribe((val) => {		  console.log('sub 1:', val);		});
        behaviourSubject.next(1);
        behaviourSubject.subscribe((val) => {		  console.log('sub 2:', val);		});
        behaviourSubject.next(2);
    Output: sub 1: 0
            sub 1: 1
            sub 2: 1
            sub 1: 2
            sub 2: 2

ReplaySubject: 
- ReplaySubject, which replays a specified number of emitted values.
- Pass how many number of values.
    Ex: const replaySubject = new ReplaySubject(2);
        replaySubject.next(1);
        replaySubject.next(2);
        replaySubject.next(3);
        replaySubject.subscribe((val) => {		  console.log('sub 1:', val);		});
    Output: sub 1: 2
            sub 1: 3
 
AsyncSubject: 
- emits the last value only when the subject is completed
- If the subject has not completed, it will not emit anything to its subscribers.
    Ex: const asyncSubject = new AsyncSubject();
        asyncSubject.next(1);
        asyncSubject.subscribe((val) => {		  console.log('sub 1:', val);		});
        asyncSubject.next(2);
        asyncSubject.subscribe((val) => {		  console.log('sub 2:', val);		});	
        asyncSubject.complete();
    Output: sub 1: 2
            sub 2: 2
