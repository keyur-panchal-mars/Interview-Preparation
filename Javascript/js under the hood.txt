Javascript Under The Hood
 
Javascript engine executes the javascript script or code.
It has main two parts. Heap and Call Stack 
 
What is heap?
	Heap is an unstructured memory that is used for memory allocation of the variables and the objects.
 
What is call stack?
	Call Stack is a LIFO data structure that is used for function calls that record where we are in the program.
 
When the V8 engine encounters an error, it prints a stack trace. A stack trace is basically the state of the Call Stack. Ex. Maximum call stack size exceeded is common call stack error.
 
What is Web APIs?
	The Web APIs are provided by the web browser that gives additional functionality to the V8 engine/Javascript engine.
 
What is event Loop
	Thereâ€™s an endless loop, where the JavaScript engine waits for tasks, executes them and then sleeps, waiting for more tasks.
	The Event Loop has only one simple job to do. It looks at the Call Stack and Callback Queue, if the Call Stack is empty, it pushes the first callback function of the Callback
	The general algorithm of the engine:
		1. While there are tasks:
			execute them, starting with the oldest task.
		2. Sleep until a task appears, then go to 1.
	Queue to the Call Stack..
	Whenever the Call Stack is empty, the JS execution environment occasionally checks to see if anything is Queued in the Event Loop. If it is, the first item is moved to the Call Stack for execution.

What is starved Event Loop	
	When "Event Loop" has to wait for call stack to be empty so event loop's process to be pushed into call stack. 
 
Queue	
	Queue known as message queue or task list also.
	There are two main types of task queues in JavaScript: the microtask queue and the macrotask queue.
	Microtask:
		The microtask queue, as the name suggests, handles microtasks. Microtasks have higher priority and are executed immediately after the currently executing task, but before the next task is picked up from the event queue. This ensures that microtasks are processed as soon as possible.	
		Ex: Promises, await
	Mactotask:
		The macrotask queue handles macrotasks, which are executed at a lower priority compared to microtasks. Macrotasks are picked up from the event queue only when there are no microtasks pending execution. This ensures that macrotasks do not block critical operations and keep the application responsive.
		Ex: setInterval,setTimeout,user interactions
