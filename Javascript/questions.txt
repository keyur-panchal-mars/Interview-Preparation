What is Javascript ? 
- Javascript is a scripting language for the web. scripting language talks with other programming language.

-----------------------------------------------------------------------------------------------------------------

What is different between statments and expressions ?
- Expressions are lines of code that returns the value or becomes value. Ex: x + 1 is expression.
- While containing function method with some side effect we call them statments, statments can be collection of multiple expressions.

-----------------------------------------------------------------------------------------------------------------

what is reference types
- Reference types are non primitive types like array and objects.

-----------------------------------------------------------------------------------------------------------------

What is hoisting in javascript ?
- Hoisting is a concept or behavior in JavaScript where the declaration of a function, variable, 
  or class goes to the top of the scope they were defined in.
- Defined in global scope.
- If it is defined and access it before initalization we get the undefined value. If variable is not defined and access it gets error "not defined".
- Remember, variables are hoisted but only to the top of the scope they were declared in.

-----------------------------------------------------------------------------------------------------------------

What is diff between let var and const.
- Var is functional scope else window/ global means if no function then it will be global.
- Let and const are blocn scope. Means in {}
- Let and var both hoisted. 
- We can use var before defining. It will give undefined. 	
- We can not use let and const before defining. Will give error of "initalization".
- Default value of let is also undefined.
- Const must require the value during defining.
- We can redeclare same variable with var in any scope. We can't redeclare variable with let and const, Gives  SyntaxError "Already assigned or declared error".

-----------------------------------------------------------------------------------------------------------------

What is "temporal dead zone"
- When accessing assigned variable with let and const gives error and known ad "TDZ".

-----------------------------------------------------------------------------------------------------------------

Explain data types in javascript 
- Have two types primitive and non-primitive types. Non-primitive also known as reference types.
- Primitive types : number, string, boolean, null, undefined
- Non primitive types : Objects (Array and functions are objects in javascript)

-----------------------------------------------------------------------------------------------------------------

What is Lexical scoping
- Inner functions have access to the variables of outer scopes. Using them is known as Lexical scoping.

-----------------------------------------------------------------------------------------------------------------

What is closures 
- A closure is the combination of a function and the lexical environment within which that function was declared. 
- Lexical environment is when outer function variable is used by inner function or scope.
- A closure can be defined as a JavaScript feature in which the inner function has access to the outer function variable.
	Ex: 
		function createPerson() {
			let name;
 
			return {
				getName() {
					return name;
				},
				setName(newName) {
					name = newName;
				}
			};
		}
 
		const person = createPerson();
		console.log(person.getName()); // Should initially print: undefined
		person.setName('Charlie');
		console.log(person.getName()); // Should print: "Charlie"

-----------------------------------------------------------------------------------------------------------------

Execution context
 
How many types of execution context in javascript
	There are two types of execution contexts: global and function.
	JavaScript script first starts to run, and it represents the global scope in JavaScript. A function execution context is created whenever a function is called, representing the function's local scope.
 
How many phases of execution context
	Creation phase and execution phase	
Ex : 
	var a=1; a=5;
	Initiates the global execution context:
		Each execution context global or other have memory and code parts.
		Each execution context have scope chain to determine what variables and functions the context has access to.
		Scope chain is determined by lexical environment of the execution context.
		Finally, the execution stack is a data structure that stores execution contexts in a last-in, first-out (LIFO) order. When a function is called, a new execution context is created and pushed onto the top of the stack. When a function returns, its execution context is popped off the stack.
 
		Creation phase: 
			Sets up memory for storing variables, function 
			Store values as undefined		
		Execution phase:
			Runs Code one by one top to bottom. And for each line of code for ex if function it creates function's execution context and it also have memory and code part.
			Allocates values as execution.
	To keep the track of all the contexts, including global and functional, the JavaScript engine uses a call stack.
	global execution context will be removed at last from call stack.

-----------------------------------------------------------------------------------------------------------------

What is callback 
	Callbacks are functions passed as arguments to other functions. They defer the execution of code until a certain event occurs or an operation is completed.
	Ex: 
 
What is "callback hell" and how can it be avoided or mitigated?
	Callback Hell refers to the situation where multiple nested callbacks make code hard to read and maintain. It often occurs when dealing with multiple asynchronous operations where each depends on the result of the previous one.
	Ex: 
		asyncOperation1(function(err, result1) {
		  if (err) return handleError(err);
		  asyncOperation2(result1, function(err, result2) {
			if (err) return handleError(err);
			asyncOperation3(result2, function(err, result3) {
			  if (err) return handleError(err);
			  // Continue nesting...
			});
		  });
		});
 
	To avoid use promises or async await  
	Solutions :
		Promise: asyncOperation1().then(result1 => asyncOperation2()).then(result2 => asyncOperation3()).catch(error => log(error));
		async await: 
		async function asyncOperation1(){
			try{
				const result1 = await asyncOperation1();
				const result2 = await asyncOperation2();
				const result3 = await asyncOperation3();
				log(result3)
			} catch(err) {
				log(err)
			}
 
		}
 
-----------------------------------------------------------------------------------------------------------------

Javascript Under The Hood
 
Javascript engine executes the javascript script or code.
It has main two parts. Heap and Call Stack 
 
What is heap?
	Heap is an unstructured memory that is used for memory allocation of the variables and the objects.
 
What is call stack?
	Call Stack is a LIFO data structure that is used for function calls that record where we are in the program.
 
When the V8 engine encounters an error, it prints a stack trace. A stack trace is basically the state of the Call Stack. Ex. Maximum call stack size exceeded is common call stack error.
 
What is Web APIs?
	The Web APIs are provided by the web browser that gives additional functionality to the V8 engine/Javascript engine.
 
What is event Loop
	The Event Loop has only one simple job to do. It looks at the Call Stack and Callback Queue, if the Call Stack is empty, it pushes the first callback function of the Callback Queue to the Call Stack..
	Whenever the Call Stack is empty, the JS execution environment occasionally checks to see if anything is Queued in the Event Loop. If it is, the first item is moved to the Call Stack for execution.
 
What is starved Event Loop	
	When "Event Loop" has to wait for call stack to be empty so event loop's process to be pushed into call stack. 
 
Queue	
	Queue known as message queue or task list also.
	There are two main types of task queues in JavaScript: the microtask queue and the macrotask queue.
	Microtask:
		The microtask queue, as the name suggests, handles microtasks. Microtasks have higher priority and are executed immediately after the currently executing task, but before the next task is picked up from the event queue. This ensures that microtasks are processed as soon as possible.	
		Ex: Promises
	Mactotask:
		The macrotask queue handles macrotasks, which are executed at a lower priority compared to microtasks. Macrotasks are picked up from the event queue only when there are no microtasks pending execution. This ensures that macrotasks do not block critical operations and keep the application responsive.
		Ex: setInterval,setTimeout,user interactions

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

type coercion Falsy Values and  == && === testing equality.
 
	There are only six falsy values : false,0,"",null,undefined,NaN. 
		Comparing false,0 and "" are equals to each other.
		Comparing null and undefined, they are only equal to themselves and each other.
		NaN is not equivalent to anything. Even cooler, itâ€™s not even itself!
 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

IIFE (Immediately Invoked Function Expression) and Modules
	1. !function test { something }();  2. (function test { something })();  3. (function test { something }());  
	-With ! js runs code as expression. Other replacer are +,-,~. Basically any unary operator can be used
 
	Ex: With Params
	1. (function test(param) { console.log(paam) })(1);

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
What is module
A module is a reusable piece of code that encapsulates implementation details and exposes a public API so it can be easily loaded and used by other code.
 
A module loader interprets and loads a module written in a certain module format at runtime. Popular examples are RequireJS and SystemJS.
 
A module bundler replaces a module loader and generates a bundle of all code at build time. Popular examples are Browserify and Webpack.
 
The ES6 Module system we use mostly. That export function and import it where we want to use. or import 'name' as 'other name'. or  import * as 'name' and use name.xyz;

-----------------------------------------------------------------------------------------------------------------

this keyword 
 
1. "this" in global scope always points to the globalObject (globalObject depends on javascript runtime env)
	In frontend it is window, like in nodejs it is global
2. "this" in a function depends on 2 things
	- 'this substitution': If value of this keyword is  undefined or null then it replaced by globalObject
    a. strict / non strict mode (in strict mode, "this" is undefined, in non strict mode, "this substitution" takes place and "this" points to globalObject)
    b. how the function is being invoked (if we invoke the function using the global object in strict mode, then "this" will point to that globalObject)
3. "this" in a object's method (when object's property is function we call it method) always points to the object that is used to invoke the method.
4. call, apply & bind are used to share a method with another object (hence the "this" keyword reference would also change accordingly)
	Ex: const obj = { name: 'keyur', print = function { console.log(this.name) } }
		obj.print(); // keyur
 
		const obj2 = { name: 'newName' }
		obj.print.call(obj2);
 
5. "this" inside arrow function refers to the enclosing lexical context 
	- lexical context means where the code is written or last scope  ... like in script only arrow function then it is global
	- arrow function does not provide their own this binding.
6. "this" in DOM points to the HTML element itself on which it is being used

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Is javascript compiled or interpreted language?
 
	Compiled Language: The code compiled and validated before execution. Will fire error if code is invalid at any line. Then it executes.
		Compiled: Initally slow but overall faster in execution. More performance.
	Interpreted Language: The code is executed line by line. 
		Interpreted: Intially faster but overall slower in execution. Less performance.
 
	Ex: console.log("something"); for(is having error); // Here something will log and ther error thus it seems interpreted.
	Ex: console.log("something"); console.log("ss);		// Here will give error due to second invalid log, thus it seems compiled.
 
	While it may seem like JavaScript code is being executed line by line, this is only true during the parsing phase.  In reality, the entire code is compiled at once to convert it into machine-readable code before execution.
 
	Therefore, JavaScript is a just-in-time compiled language that uses an interpreter in its first phase. We Can Also Say that it is bit of both.
 
	It uses JIT Compiler. 
 
What is JIT Compiler ?
 
	JIT (just-in-time) compilation is a technique used by modern JavaScript engines to improve the performance of JavaScript code.
	JIT compiler take a middle-ground approach. They initially interpret the code and then selectively compile parts of it that are used repeatedly. This approach balances fast start-up time with improved performance.
 
JavaScript code is parsed before execution, which makes it look like a parsed language, but the code is actually converted to binary(machine code that is directly executed by the computer's hardware) form before execution. This conversion process involves several steps, including transpiling the code, parsing it to an Abstract Syntax Tree (AST), converting it to bytecode, and optimizing it with a JIT compiler.
 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Bitwise Operator
Why we can not use '&&' or '||' in javascript ?
	Because & and | is reserved for Bitwise operators.
	Bitwise Operators which works with bits like in 0001 and so on. 
Where we can use Bitwise Operators?
	When we have multiple true false and its use cases. The bitwise operators gave flexibility as in single string like 1010 gives two values and so on so you just have to check single bits.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

DOM
	Document Object Model
	To Manipulate the browser
	Browser creates window. Window have : location ,  document and history main
	Traversing downwards
		element.querySelector
		element.querySelectorAll
		element.children
	Traversing upwards
		element.parentElement
		element.closest
	Traversing sideways
		element.nextElementSibling
		element.previousElementSibling
		Combine parentElement, children, and index

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

call, apply and bind 
 
bind: 
	The bind() method creates a new function that, when called, has its this keyword set to the provided value. 
	Ex: var obj = {
				firstName: 'Keyur',
				logName: function () { returns this.firstName; }
		}
		var logName = function() { console.log(this.logName()) }
		var logIt = logName.bind(obj);
		logIt();
call: 
	The call() method calls a function with a given this value and arguments provided individually. It executes the function it was called upon right away.
	The call() method does not make a copy of the function it is being called on.
apply : 
	call() and apply() serve the exact same purpose. The only difference between how they work is that call() expects all parameters to be passed in individually, whereas apply() expects an array of all  of our parameters.
	Ex: 
		var pokemon = {
			firstname: 'Pika',
			lastname: 'Chu ',
			getPokeName: function() {
				var fullname = this.firstname + ' ' + this.lastname;
				return fullname;
			}
		};
 
		var pokemonName = function(snack, hobby) {
			console.log(this.getPokeName() + ' loves ' + snack + ' and ' + hobby);
		};
 
		pokemonName.call(pokemon,'sushi', 'algorithms'); // Pika Chu  loves sushi and algorithms
		pokemonName.apply(pokemon,['sushi', 'algorithms']); // Pika Chu  loves sushi and algorithms

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------