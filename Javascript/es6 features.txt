ES6 Features: 
 
1. let and const keywords were added 

2. Arrow Functions
	ES6 provides a feature known as Arrow Functions. It provides a more concise syntax for writing function expressions by removing the "function" and "return" keywords.
	Ex: const add = (a, b) => a + b;

3. Template Literals
	Template literals allow for easier string interpolation and multi-line strings. They are enclosed by backticks (`) instead of single or double quotes.
	Ex: const name = 'World';
		console.log(`Hello, ${name}!`);

4. Destructuring Assignment
	Destructuring allows unpacking values from arrays or properties from objects into distinct variables.
	Ex: const arr = [1, 2, 3];
		const [x, y] = arr; // x = 1, y = 2
		const obj = { a: 1, b: 2 };
		const { a, b } = obj; // a = 1, b = 2

5. Default Parameters
	Functions can now have default values for parameters, making function calls more flexible.
	Ex: function multiply(a, b = 1) {
			return a * b;
		}

6. Rest and Spread Operators
	The rest operator (...) allows functions to accept an indefinite number of arguments as an  , while the spread operator spreads an array or object into individual elements.
	Ex: 
		function sum(...args) {
			return args.reduce((a, b) => a + b, 0);
		}
 
		const arr1 = [1, 2, 3];
		const arr2 = [4, 5, 6];
		const combined = [...arr1, ...arr2]; // [1, 2, 3, 4, 5, 6]

7. Modules
	ES6 introduced a standardized module system, allowing the use of import and export statements to include and share code across files.
	Ex:	// module.js
		export const pi = 3.14;
		// main.js
		import { pi } from './module.js';

8. Promises
	Promises provide a cleaner way to handle asynchronous operations, representing a value that may be available now, or in the future, or never.
	Ex: const fetchData = () => {
			return new Promise((resolve, reject) => {
				// Simulate async operation
				setTimeout(() => resolve('Data received'), 1000);
			});
		};
