Array methods
 
1. push()
    Usage: Adds one or more elements to the end of an array and returns the new length.
    Example:    const arr = [1, 2];
                arr.push(3); // arr is now [1, 2, 3]
 
2. pop()
    Usage: Removes the last element from an array and returns that element.
    Example:
        const arr = [1, 2, 3];
        const last = arr.pop(); // last is 3, arr is now [1, 2]
 
3. shift()
    Usage: Removes the first element from an array and returns that element.
    Example:
        const arr = [1, 2, 3];
        const first = arr.shift(); // first is 1, arr is now [2, 3]
 
4. unshift()
    Usage: Adds one or more elements to the beginning of an array and returns the new length.
    Example:
        const arr = [2, 3];
        arr.unshift(1); // arr is now [1, 2, 3]
 
5. slice()
    Usage: Returns a shallow copy of a portion of an array into a new array object. It does not modify the original array.
    Example:
        const arr = [1, 2, 3, 4];
        const sliced = arr.slice(1, 3); // sliced is [2, 3]
 
6. splice()
    Usage: Adds or removes items from an array and modifies the original array.
    Example:
        const arr = [1, 2, 3, 4];
        arr.splice(1, 2); // arr is now [1, 4]
 
7. forEach()
    Usage: Executes a provided function once for each array element.
    Example:
        const arr = [1, 2, 3];
        arr.forEach(num => console.log(num)); // Logs 1, 2, 3
 
8. map()
    Usage: Creates a new array with the results of calling a provided function on every element in the calling array.
    Example:
        const arr = [1, 2, 3];
        const doubled = arr.map(num => num * 2); // doubled is [2, 4, 6]
 
9. filter()
    Usage: Creates a new array with all elements that pass the test implemented by the provided function.
    Example:
        const arr = [1, 2, 3, 4];
        const evens = arr.filter(num => num % 2 === 0); // evens is [2, 4]
 
10. reduce()
    Usage: Executes a reducer function on each element of the array, resulting in a single output value.
    Example:
        const arr = [1, 2, 3, 4];
        const sum = arr.reduce((acc, num) => acc + num, 0); // sum is 10find()
 
11. find()
    Usage: Returns the value of the first element in the array that satisfies the provided testing function.
    Example:
        const arr = [1, 2, 3, 4];
        const found = arr.find(num => num > 2); // found is 3some()
 
12. some()
    Usage: Tests whether at least one element in the array passes the test implemented by the provided function.
    Example:
        const arr = [1, 2, 3, 4];
        const hasEven = arr.some(num => num % 2 === 0); // hasEven is true
 
13. every()
    Usage: Tests whether all elements in the array pass the test implemented by the provided function.
    Example:
        const arr = [2, 4, 6];
        const allEven = arr.every(num => num % 2 === 0); // allEven is true
 
14. findIndex()
	Usage: Returns the index of the first element in the array that satisfies the provided testing function. If no elements satisfy the testing function, it returns -1.
	Example:
		const arr = [5, 12, 8, 130, 44];
		const index = arr.findIndex(num => num > 10); // index is 1
 
15. fill()
	Usage: Fills all the elements of an array from a start index to an end index with a static value.
	Example:
		const arr = new Array(5).fill(0); // [0, 0, 0, 0, 0]
		const filled = [1, 2, 3].fill(4, 1, 2); // [1, 4, 3]
 
16. includes()
	Usage: Determines whether an array includes a certain value among its entries, returning true or false as appropriate.
	Example:
		const arr = [1, 2, 3];
		const hasTwo = arr.includes(2); // true
 
17. join()
	Usage: Joins all elements of an array into a string, with a specified separator.
	Example:
		const arr = ['Hello', 'World'];
		const str = arr.join(' '); // "Hello World"
 
18. reverse()
	Usage: Reverses the elements of an array in place (the first element becomes the last, and the last becomes the first).
	Example:
		const arr = [1, 2, 3];
		arr.reverse(); // arr is now [3, 2, 1]
 
19. sort()
	Usage: Sorts the elements of an array in place and returns the sorted array. By default, it sorts in ascending order, but it can take a compare function.
	Example:
		const arr = [3, 1, 4, 1, 5];
		arr.sort(); // arr is now [1, 1, 3, 4, 5]
 
20. flat()
	Usage: Creates a new array with all sub-array elements concatenated into it recursively up to the specified depth.
	Example:
		const arr = [1, [2, [3, 4]]];
		const flattened = arr.flat(2); // [1, 2, 3, 4]
 
21. Array.from()
	Usage: Creates a new, shallow-copied array instance from an array-like or iterable object.
	Requires an array-like or iterable object.
	Example: 
		const str = "Hello";
		const arr = Array.from(str); // ['H', 'e', 'l', 'l', 'o']
 
22. Array.of()
	Usage: The Array.of() method creates a new Array instance with a variable number of arguments, regardless of the number or types of the arguments.
	Takes multiple arguments directly
	Example: 
		const str = "123";
		const arr = Array.of(str); // ['123']
